from sqlalchemy import Column, Integer, String, DateTime,Boolean, Enum, ForeignKey, Text
from sqlalchemy.orm import relationship
from app.database import Base
from passlib.hash import bcrypt
from datetime import datetime
import enum #–≤—ã–±–æ—Ä –º–µ–∂–¥—É –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏(–∞–¥–º–∏–Ω –∏–ª–∏ —é–∑–µ—Ä)
import pytz

moscow_tz = pytz.timezone('Europe/Moscow')

class RoleEnum(str, enum.Enum):
    admin = "admin"
    user = "user"

#–¢–∞–±–ª–∏—Ü–∞ —Å –ø—Ä–æ–∏—Å—à–µ—Å—Ç–≤–∏—è–º–∏
class Incident(Base): #–°–æ–∑–¥–∞–π —Ç–∞–±–ª–∏—Ü—É —Å –∏–º–µ–Ω–µ–º incidents üìë –ö–∞–∂–¥–∞—è –∑–∞–ø–∏—Å—å (–æ–±—ä–µ–∫—Ç) ‚Äî —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ.
    __tablename__ = "incident"
    id = Column(Integer, primary_key = True, index = True)

    created_at = Column(DateTime, default=lambda: datetime.now(moscow_tz))
    organization = Column(String, nullable=False)  # –î–û (–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è)
    field = Column(String, nullable=False)         # –ú–µ—Å—Ç–æ—Ä–æ–∂–¥–µ–Ω–∏–µ/–ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã–π —É—á–∞—Å—Ç–æ–∫

    event_area = Column(String, nullable=False)    # –û–±–ª–∞—Å—Ç—å —Å–æ–±—ã—Ç–∏—è (—Ç–µ–∫—Å—Ç)
    event_type = Column(String, nullable=False)    # –¢–∏–ø —Å–æ–±—ã—Ç–∏—è (—Ç–µ–∫—Å—Ç)

    description = Column(Text, nullable=True)      # –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–∏—Å—à–µ—Å—Ç–≤–∏—è
    consequences = Column(Text, nullable=True)     # –ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è
    comments = Column(Text, nullable=True)         # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏

    user_id = Column(Integer, ForeignKey("user.id"))  # –í–Ω–µ—à–Ω–∏–π –∫–ª—é—á –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = relationship("User", back_populates="incidents")  # –°–≤—è–∑—å —Å User

class User(Base):
    __tablename__ = "user"

    id = Column(Integer, primary_key = True, index = True)
    username = Column(String, unique=True, index = True)
    hashed_password = Column(String, nullable=False)
    name = Column(String, index = True)
    surname = Column(String, index = True)
    organization = Column(String, index = True)
    is_active = Column(Boolean, default=True)        
    role = Column(Enum(RoleEnum), default="user")
    telegram_id = Column(String, unique=True, nullable=True)

    incidents = relationship("Incident", back_populates="user")  # –°–≤—è–∑—å —Å Incident

